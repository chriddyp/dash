version: 2

jobs:

  # "python-3.7-lint-unit": &lint-unit
  #   working_directory: ~/dash
  #   docker:
  #     - image: circleci/python:3.7-stretch-node-browsers
  #       environment:
  #         PYLINTRC: .pylintrc37

  #   steps:
  #     - checkout
  #     - restore_cache:
  #         key: v-{{ checksum "requires-ci.txt" }}-{{ checksum "requires-install.txt" }}-{{ checksum "requires-testing.txt" }}
  #     - run:
  #         name: üöß pip dev requirements
  #         command: |
  #           python -m venv venv || virtualenv venv
  #           . venv/bin/activate
  #           pip install -r requires-install.txt -r requires-ci.txt -r requires-testing.txt --quiet
  #     - save_cache:
  #         key: v-{{ checksum "requires-ci.txt" }}-{{ checksum "requires-install.txt" }}-{{ checksum "requires-testing.txt" }}
  #         paths:
  #             - "venv"
  #     - run:
  #         name: üå∏ linting
  #         command: |
  #           . venv/bin/activate
  #           pip install -e .[ci,testing] --quiet
  #           pip list | grep dash
  #           flake8 dash setup.py
  #           flake8 --ignore=E123,E126,E501,E722,E731,F401,F841,W503,W504 --exclude=metadata_test.py tests
  #           pylint dash setup.py --rcfile=$PYLINTRC
  #           pylint tests/unit tests/integration/devtools tests/integration/renderer tests/integration/dash_assets -d all -e C0410,C0411,C0412,C0413,W0109
  #           cd dash-renderer && npm install --ignore-scripts && npm run lint:test && npm run format:test
  #     - run:
  #         name: ‚õë Run unit tests
  #         command: |
  #           . venv/bin/activate
  #           mkdir test-reports
  #           PYTHONPATH=~/dash/tests/assets pytest --junitxml=test-reports/junit.xml tests/unit


  "python-3.7-integration-setup": &integration-setup
    working_directory: ~/dash
    docker:
      - image: circleci/python:3.7-stretch-node-browsers

    steps:
      - checkout
      - restore_cache:
          key: v-{{ checksum "requires-ci.txt" }}-{{ checksum "requires-install.txt" }}-{{ checksum "requires-testing.txt" }}
      # - attach_workspace:
      #     at: ~/dash
      - run:
          name: üöß build
          command: |
              . venv/bin/activate
              mkdir packages
              pip install -e . --quiet
              python setup.py sdist && mv dist/* packages/
              cd dash-renderer && npm install --ignore-scripts && npm run build:dev && npm run build && python setup.py sdist && mv dist/* ../packages/ && cd ..
              git clone --depth 1 https://github.com/plotly/dash-core-components.git
              git clone --depth 1 https://github.com/plotly/dash-html-components.git
              git clone --depth 1 https://github.com/plotly/dash-table.git
              git clone --depth 1 https://github.com/plotly/dash-renderer-test-components
              cd dash-core-components && npm install --ignore-scripts && npm run build && python setup.py sdist && mv dist/* ../packages/  && cd ..
              cd dash-html-components && npm install --ignore-scripts && npm run build && python setup.py sdist && mv dist/* ../packages/ && cd ..
              cd dash-table && npm install --ignore-scripts && npm run build && python setup.py sdist && mv dist/* ../packages/ && cd ..
              cd dash-renderer-test-components && npm install --ignore-scripts && npm run build:all && python setup.py sdist && mv dist/* ../packages/ && cd ..
      - persist_to_workspace:
          root: ~/dash
          paths:
            - packages

  "python-3.7-integration": &integration
    working_directory: ~/dash
    docker:
      - image: circleci/python:3.7-stretch-node-browsers
        environment:
          PERCY_PARALLEL_TOTAL: '-1'
    parallelism: 2
    steps:
      - checkout
      - restore_cache:
          key: v-{{ checksum "requires-ci.txt" }}-{{ checksum "requires-install.txt" }}-{{ checksum "requires-testing.txt" }}
      - attach_workspace:
          at: ~/dash
      - run:
          name: Integration
          command: |
            . venv/bin/activate
            cd packages && pip install * && cd ..
            pip list
            TESTFILES=$(circleci tests glob "tests/integration/**/test_*.py" | circleci tests split --split-by=timings)
            echo ${TESTFILES}
            pytest --headless --durations=10 --junitxml=test-reports/junit_intg.xml ${TESTFILES}
      - store_artifacts:
          path: test-reports
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: /tmp/dash_artifacts

  "finalize-percy":
    docker:
      - image: percyio/agent
    steps:
      - run:
          name: "call percy"
          command: percy finalize --all

  #     - run:
  #         name: ‚öôÔ∏è run integration test
  #         command: |
  #           . venv/bin/activate
  #           pip list | grep dash
  #           ls -la ~/venv/lib/python3.7/site-packages
  #           TESTFILES=$(circleci tests glob "tests/integration/**/test_*.py" | circleci tests split --split-by=timings)
  #           echo ${TESTFILES}
  #           pytest --headless --durations=10 --junitxml=test-reports/junit_intg.xml ${TESTFILES}
  #     - store_artifacts:
  #         path: test-reports
  #     - store_test_results:
  #         path: test-reports
  #     - store_artifacts:
  #         path: /tmp/dash_artifacts

  # "python-2.7":
  #     <<: *test-template
  #     docker:
  #       - image: circleci/python:2.7-stretch-node-browsers
  #         environment:
  #           PYLINTRC: .pylintrc
  #           PERCY_ENABLE: 0

  # "python-3.6":
  #   <<: *test-template
  #   docker:
  #     - image: circleci/python:3.6-stretch-node-browsers
  #       environment:
  #         PYLINTRC: .pylintrc
  #         PERCY_ENABLE: 0

workflows:
  version: 2
  build:
    jobs:
      # - "python-2.7"
      # - "python-3.6"
      # - python-3.7-lint-unit
      - python-3.7-integration-setup
      - python-3.7-integration:
          requires:
            - python-3.7-integration-setup
      - finalize-percy:
          requires:
            - python-3.7-integration